<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
 <meta name="generator" content="Adobe RoboHelp 11" />
<title>GrooperDb_SDK</title>
<link rel="StyleSheet" href="../../default.css" type="text/css" /><script type="text/javascript" language="JavaScript">
//<![CDATA[
function reDo() {
  if (innerWidth != origWidth || innerHeight != origHeight)
     location.reload();
}
if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
	origWidth = innerWidth;
	origHeight = innerHeight;
	onresize = reDo;
}
onerror = null; 
//]]>
</script>
<style type="text/css">
<!--
div.WebHelpPopupMenu { position:absolute;
left:0px;
top:0px;
z-index:4;
visibility:hidden; }
p.WebHelpNavBar { text-align:right; }
-->
</style>
<script type="text/javascript" language="javascript1.2" src="../../whmsg.js" charset="utf-8"></script>
<script type="text/javascript" language="javascript" src="../../whver.js" charset="utf-8"></script>
<script type="text/javascript" language="javascript1.2" src="../../whutils.js" charset="utf-8"></script>
<script type="text/javascript" language="javascript1.2" src="../../whproxy.js" charset="utf-8"></script>
<script type="text/javascript" language="javascript1.2" src="../../whlang.js" charset="utf-8"></script>
<script type="text/javascript" language="javascript1.2" src="../../whtopic.js" charset="utf-8"></script>
<script type="text/javascript" language="javascript1.2">//<![CDATA[
<!--
if (window.gbWhTopic)
{
	var strUrl = document.location.href;
	var bc = 0;
	var n = strUrl.toLowerCase().indexOf("bc-");
	if(n != -1)
	{
		document.location.replace(strUrl.substring(0, n));
		bc = strUrl.substring(n+3);
	}

	addTocInfo("Developer Reference\nGrooper\nGrooperDb_SDK");
addButton("show",BTN_IMG,"Show","","","","",0,0,"../../whd_show0.gif","../../whd_show2.gif","../../whd_show1.gif");
addButton("hide",BTN_IMG,"Hide","","","","",0,0,"../../whd_hide0.gif","../../whd_hide2.gif","../../whd_hide1.gif");
addButton("prev",BTN_IMG,"<<","","","","",0,0,"../../whd_prev0.gif","../../whd_prev2.gif","../../whd_prev1.gif");
addButton("next",BTN_IMG,">>","","","","",0,0,"../../whd_next0.gif","../../whd_next2.gif","../../whd_next1.gif");


	document.write("<p style=\"text-align:right\"> ");
AddMasterBreadcrumbs("../../Index.htm", "", ">", "Home", "../../Start_Page.htm");
document.write("<a href=\"../Developer_Reference.htm\">Developer Reference<\/a> > <a href=\"Grooper_Namespace_Reference.htm\">Grooper<\/a> > GrooperDb_SDK<\/p>");

}
else
	if (window.gbIE4)
		document.location.reload();
    
onLoadHandler = function()
{
	if (window.setRelStartPage)
	{
    setTimeout("setRelStartPage('../../Index.htm');", 1)

    setTimeout("UpdateBreadCrumbsMarker();", 1);
    }
} 

if (window.addEventListener){  
	window.addEventListener('load', onLoadHandler, false);   
} else if (window.attachEvent){  
	window.attachEvent('onload', onLoadHandler);  
}

function onSetStartPage()
{
	autoSync(1);
	sendSyncInfo();
	sendAveInfoOut();
}
//-->
//]]></script>
</head>
<body><script type="text/javascript" language="javascript1.2">//<![CDATA[
<!--
if (window.writeIntopicBar)
	writeIntopicBar(4);
//-->
//]]></script>
<script type="text/javascript" src="../../ehlpdhtm.js" language="JavaScript1.2"></script>

<div style="width: 100%; position: relative;" id="header">
	<table class="PageHeader" cellspacing="0" width="100%">
		<col style="width: 50%;" />
		<col style="width: 50%;" />
		<tr>
			<td style="padding-left: 0px; padding-top: 0px; padding-right: 0px; 
				 padding-bottom: 0px;">Grooper 2.50 
			 Documentation</td>
			<td style="padding-left: 0px; padding-top: 0px; padding-right: 0px; 
				 padding-bottom: 0px;">
   <p style="text-align: right; margin: 0px;"><img src="../../images/GrooperLogo.png" alt="" style="border: none; 
			 margin: 0px;" width="190" height="64" border="0" /></p></td>
		</tr>
	</table>
	<hr align="center" />
</div>


<h1>GrooperDb</h1>
<p>
Represents the database associated with a Grooper repository.


</p><br/><b>Namespace:</b> &nbsp;<a href='Grooper_Namespace_Reference.htm'>Grooper</a><br/><b>Inherits from:</b> SqlDatabase<br/><h2>Properties</h2>
<table class='ObjectProperties' width='100%' style='cellspacing=0;'>
  <col style='width:25%'/>
  <col style='width:25%'/>
  <col style='width:50%'/>
  <tr>
     <th>Property Name</th>
     <th>Property Type</th>
     <th>Description</th>
  </tr>
  <tr>
     <td>CommandTimeout</td>
     <td>Int32</td>
     <td>The time in seconds to wait for a command to execute. The default is 30 seconds. A value of 0 indicates no limit (an attempt to execute a command will wait indefinitely).
</td>
  </tr>
  <tr>
     <td>IsDirty</td>
     <td>Boolean</td>
     <td>Returns a true or false indicating if changes are cached for saving to the database.
</td>
  </tr>
</table>
<br/><h2>Methods</h2>
<table class='ObjectProperties' width='100%' style='cellspacing=0;'>
  <col style='width:50%'/>
  <col style='width:50%'/>
  <tr>
     <th>Method Name</th>
     <th>Description</th>
  </tr>
  <tr>
     <td>AddBlobParams(Query As String, dbcmd As IDbCommand, Blobs() As TheType) As Boolean</td>
     <td><table class='ParamList' width='100%'>
  <col style='width:100%'/>
  <tr>
     <td><b>Parameters</b></td>
  </tr>
  <tr>
     <td><i>Query</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: String</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
  <tr>
     <td>&nbsp;</td>
  </tr>
  <tr>
     <td><i>dbcmd</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: IDbCommand</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
  <tr>
     <td>&nbsp;</td>
  </tr>
  <tr>
     <td><i>Blobs</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: TheType</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
</table>
</td>
  </tr>
  <tr>
     <td>AllObjectsOfType(TypeName As String) As IEnumerable`1</td>
     <td><table class='ParamList' width='100%'>
  <col style='width:100%'/>
  <tr>
     <td><b>Parameters</b></td>
  </tr>
  <tr>
     <td><i>TypeName</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: String</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
</table>
</td>
  </tr>
  <tr>
     <td>BeginTransaction() As Boolean</td>
     <td></td>
  </tr>
  <tr>
     <td>CacheThumbnail(Page As <a href='../../Administrator_Reference/Grooper_Node_Types/Batch_Processing/Batch_Page.htm'>BatchPage</a>, Image As <a href='GrooperImage_SDK.htm'>GrooperImage</a>)</td>
     <td><table class='ParamList' width='100%'>
  <col style='width:100%'/>
  <tr>
     <td><b>Parameters</b></td>
  </tr>
  <tr>
     <td><i>Page</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: <a href='../../Administrator_Reference/Grooper_Node_Types/Batch_Processing/Batch_Page.htm'>BatchPage</a></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
  <tr>
     <td>&nbsp;</td>
  </tr>
  <tr>
     <td><i>Image</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: <a href='GrooperImage_SDK.htm'>GrooperImage</a></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
</table>
</td>
  </tr>
  <tr>
     <td>CancelNodeChange(Node As <a href='GrooperNode_SDK.htm'>GrooperNode</a>)</td>
     <td>Reports to the change tracker that a node change has been canceled.
<table class='ParamList' width='100%'>
  <col style='width:100%'/>
  <tr>
     <td><b>Parameters</b></td>
  </tr>
  <tr>
     <td><i>Node</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: <a href='GrooperNode_SDK.htm'>GrooperNode</a></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The changed GrooperNode</td>
  </tr>
</table>
</td>
  </tr>
  <tr>
     <td>CheckInAll() As Boolean</td>
     <td></td>
  </tr>
  <tr>
     <td>CheckInLicense(LicenseCode As String) As Boolean</td>
     <td><table class='ParamList' width='100%'>
  <col style='width:100%'/>
  <tr>
     <td><b>Parameters</b></td>
  </tr>
  <tr>
     <td><i>LicenseCode</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: String</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
</table>
</td>
  </tr>
  <tr>
     <td>CheckoutLicense(LicenseCode As String, ModuleName As String) As Boolean</td>
     <td><table class='ParamList' width='100%'>
  <col style='width:100%'/>
  <tr>
     <td><b>Parameters</b></td>
  </tr>
  <tr>
     <td><i>LicenseCode</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: String</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
  <tr>
     <td>&nbsp;</td>
  </tr>
  <tr>
     <td><i>ModuleName</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: String</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
</table>
</td>
  </tr>
  <tr>
     <td>CommitTransaction() As Boolean</td>
     <td></td>
  </tr>
  <tr>
     <td>ComputeFileHash(sFileName As String) As String</td>
     <td><table class='ParamList' width='100%'>
  <col style='width:100%'/>
  <tr>
     <td><b>Parameters</b></td>
  </tr>
  <tr>
     <td><i>sFileName</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: String</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
</table>
</td>
  </tr>
  <tr>
     <td>Connect(Options As ConnectOptions) As Boolean</td>
     <td>Connects to the Grooper database.
<table class='ParamList' width='100%'>
  <col style='width:100%'/>
  <tr>
     <td><b>Parameters</b></td>
  </tr>
  <tr>
     <td><i>Options</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: ConnectOptions</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Database connection options. A combination of the following flags:<br />
<ul>
<li><b>ConnectOnly</b></li>
<li><b>ValidateDatabase</b></li>
<li><b>LoadRoot</b></li>
<li><b>UpdateMachineInfo</b></li>
<li><b>LoadScriptLibraries</b></li>
<li><b>Standard</b></li>
</ul>
</td>
  </tr>
</table>
</td>
  </tr>
  <tr>
     <td>Connect() As Boolean</td>
     <td></td>
  </tr>
  <tr>
     <td>CreateNewDatabase(DatabaseName As String) As Boolean</td>
     <td>Creates a new SQL Database on the current SQL Server
<table class='ParamList' width='100%'>
  <col style='width:100%'/>
  <tr>
     <td><b>Parameters</b></td>
  </tr>
  <tr>
     <td><i>DatabaseName</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: String</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
</table>
</td>
  </tr>
  <tr>
     <td>DiscardChanges()</td>
     <td>Discards all pending changes to the tree structure, and reloads any nodes which have been changed.
</td>
  </tr>
  <tr>
     <td>DiscardThumbnail(Page As <a href='../../Administrator_Reference/Grooper_Node_Types/Batch_Processing/Batch_Page.htm'>BatchPage</a>)</td>
     <td><table class='ParamList' width='100%'>
  <col style='width:100%'/>
  <tr>
     <td><b>Parameters</b></td>
  </tr>
  <tr>
     <td><i>Page</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: <a href='../../Administrator_Reference/Grooper_Node_Types/Batch_Processing/Batch_Page.htm'>BatchPage</a></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
</table>
</td>
  </tr>
  <tr>
     <td>Disconnect()</td>
     <td>
Disconnects from the database.

</td>
  </tr>
  <tr>
     <td>Equals(obj As Object) As Boolean</td>
     <td>Determines whether the specified object is equal to the current object.
<table class='ParamList' width='100%'>
  <col style='width:100%'/>
  <tr>
     <td><b>Parameters</b></td>
  </tr>
  <tr>
     <td><i>obj</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: Object</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The object to compare with the current object. </td>
  </tr>
</table>
</td>
  </tr>
  <tr>
     <td>ExecuteBulkUpload(Datatable As <a href='../../Administrator_Reference/Grooper_Node_Types/Data_Extraction/Data_Table.htm'>DataTable</a>, DestinationTable As String, BatchSize As Int32) As Boolean</td>
     <td>Bulk loads into an MS SQL database table, the contents of the passed datatable The upload will be rolled back upon the occurrence of an error. Succeeding batches will not be processed after a batch has encountered an error.
Previous batches will not be rolled back upon the occurrence of an error. If an atomic operation is required, do not supply a batch size value, or
call Database.BeginTransaction prior to calling this function. You will then need to commit or roll back the transaction afterwards.
<table class='ParamList' width='100%'>
  <col style='width:100%'/>
  <tr>
     <td><b>Parameters</b></td>
  </tr>
  <tr>
     <td><i>Datatable</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: <a href='../../Administrator_Reference/Grooper_Node_Types/Data_Extraction/Data_Table.htm'>DataTable</a></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A data table containing the data to be uploaded to the destination table in bulk</td>
  </tr>
  <tr>
     <td>&nbsp;</td>
  </tr>
  <tr>
     <td><i>DestinationTable</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: String</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This database table must have a column for each of the columns in this passed data table</td>
  </tr>
  <tr>
     <td>&nbsp;</td>
  </tr>
  <tr>
     <td><i>BatchSize</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: Int32</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Number of rows in each batch. At the end of each batch, the rows in the batch are committed to the server.
Zero (the default) indicates that the entire dataset is written to the server in a single batch.</td>
  </tr>
</table>
</td>
  </tr>
  <tr>
     <td>ExecuteDataReader(Query As String, pa() As Object) As IDataReader</td>
     <td><table class='ParamList' width='100%'>
  <col style='width:100%'/>
  <tr>
     <td><b>Parameters</b></td>
  </tr>
  <tr>
     <td><i>Query</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: String</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
  <tr>
     <td>&nbsp;</td>
  </tr>
  <tr>
     <td><i>pa</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: Object</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
</table>
</td>
  </tr>
  <tr>
     <td>ExecuteDataRow(Query As String, pa() As Object) As DataRow</td>
     <td><table class='ParamList' width='100%'>
  <col style='width:100%'/>
  <tr>
     <td><b>Parameters</b></td>
  </tr>
  <tr>
     <td><i>Query</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: String</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
  <tr>
     <td>&nbsp;</td>
  </tr>
  <tr>
     <td><i>pa</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: Object</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
</table>
</td>
  </tr>
  <tr>
     <td>ExecuteDataTable(Query As String, pa() As Object) As DataTable</td>
     <td><table class='ParamList' width='100%'>
  <col style='width:100%'/>
  <tr>
     <td><b>Parameters</b></td>
  </tr>
  <tr>
     <td><i>Query</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: String</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
  <tr>
     <td>&nbsp;</td>
  </tr>
  <tr>
     <td><i>pa</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: Object</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
</table>
</td>
  </tr>
  <tr>
     <td>ExecuteNonQuery(Query As String, Blobs() As TheType, pa() As Object) As Int32</td>
     <td><table class='ParamList' width='100%'>
  <col style='width:100%'/>
  <tr>
     <td><b>Parameters</b></td>
  </tr>
  <tr>
     <td><i>Query</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: String</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
  <tr>
     <td>&nbsp;</td>
  </tr>
  <tr>
     <td><i>Blobs</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: TheType</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
  <tr>
     <td>&nbsp;</td>
  </tr>
  <tr>
     <td><i>pa</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: Object</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
</table>
</td>
  </tr>
  <tr>
     <td>ExecuteNonQuery(Query As String, pa() As Object) As Int32</td>
     <td>
Executes an SQL statement against the Connection object of a .NET Framework data provider, and returns the number of rows affected.

<table class='ParamList' width='100%'>
  <col style='width:100%'/>
  <tr>
     <td><b>Parameters</b></td>
  </tr>
  <tr>
     <td><i>Query</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: String</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
  <tr>
     <td>&nbsp;</td>
  </tr>
  <tr>
     <td><i>pa</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: Object</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
</table>
</td>
  </tr>
  <tr>
     <td>ExecuteNonQueryNZ(Query As String, pa() As Object) As Boolean</td>
     <td>Executes the query and returns True if the number of rows affected is not zero (False if the number of rows affected is zero). This is a shortcut function useful for determining whether an UPDATE
was successful.
<table class='ParamList' width='100%'>
  <col style='width:100%'/>
  <tr>
     <td><b>Parameters</b></td>
  </tr>
  <tr>
     <td><i>Query</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: String</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
  <tr>
     <td>&nbsp;</td>
  </tr>
  <tr>
     <td><i>pa</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: Object</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
</table>
</td>
  </tr>
  <tr>
     <td>ExecuteScalar(Query As String, Blobs() As TheType, pa() As Object) As Object</td>
     <td><table class='ParamList' width='100%'>
  <col style='width:100%'/>
  <tr>
     <td><b>Parameters</b></td>
  </tr>
  <tr>
     <td><i>Query</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: String</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
  <tr>
     <td>&nbsp;</td>
  </tr>
  <tr>
     <td><i>Blobs</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: TheType</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
  <tr>
     <td>&nbsp;</td>
  </tr>
  <tr>
     <td><i>pa</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: Object</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
</table>
</td>
  </tr>
  <tr>
     <td>ExecuteScalar(Query As String, pa() As Object) As Object</td>
     <td>
Executes the query, and returns the first column of the first row in the resultset returned by the query. Extra columns or rows are ignored.

<table class='ParamList' width='100%'>
  <col style='width:100%'/>
  <tr>
     <td><b>Parameters</b></td>
  </tr>
  <tr>
     <td><i>Query</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: String</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
  <tr>
     <td>&nbsp;</td>
  </tr>
  <tr>
     <td><i>pa</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: Object</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
</table>
</td>
  </tr>
  <tr>
     <td>ExecuteScalarNZ(Query As String, pa() As Object) As Boolean</td>
     <td>Executes the query and returns a Boolean value indicting whether the Return value
is not 0. This is a shortcut function useful for determining if objects exist in a table
using COUNT.
<table class='ParamList' width='100%'>
  <col style='width:100%'/>
  <tr>
     <td><b>Parameters</b></td>
  </tr>
  <tr>
     <td><i>Query</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: String</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
  <tr>
     <td>&nbsp;</td>
  </tr>
  <tr>
     <td><i>pa</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: Object</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
</table>
</td>
  </tr>
  <tr>
     <td>GenerateTable(ContentType As ContentType) As Boolean</td>
     <td>Creates a database table with columns for each child datafield in the passed Content Type. Each column will use the field's datatype if possible.
<table class='ParamList' width='100%'>
  <col style='width:100%'/>
  <tr>
     <td><b>Parameters</b></td>
  </tr>
  <tr>
     <td><i>ContentType</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: ContentType</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
</table>
</td>
  </tr>
  <tr>
     <td>GetColumnIndices(TableName As String) As Dictionary`2</td>
     <td>Returns a dictionary of Column Index values, keyed by Column name
<table class='ParamList' width='100%'>
  <col style='width:100%'/>
  <tr>
     <td><b>Parameters</b></td>
  </tr>
  <tr>
     <td><i>TableName</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: String</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
</table>
</td>
  </tr>
  <tr>
     <td>GetDatabaseNames() As List`1</td>
     <td></td>
  </tr>
  <tr>
     <td>GetDatabaseVersion() As Version</td>
     <td></td>
  </tr>
  <tr>
     <td>GetEmptyDataTable(TableName As String) As DataTable</td>
     <td><table class='ParamList' width='100%'>
  <col style='width:100%'/>
  <tr>
     <td><b>Parameters</b></td>
  </tr>
  <tr>
     <td><i>TableName</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: String</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
</table>
</td>
  </tr>
  <tr>
     <td>GetEventDescription(Type As EventType) As String</td>
     <td>Returns a detailed description for the specified event type.
<table class='ParamList' width='100%'>
  <col style='width:100%'/>
  <tr>
     <td><b>Parameters</b></td>
  </tr>
  <tr>
     <td><i>Type</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: EventType</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The EventType. A combination of the following flags:<br />
<ul>
<li><b>Err</b>: Errors - Critical error messages.</li>
<li><b>Wrn</b>: Warnings - Non-critical warning messages.</li>
<li><b>Prc</b>: Procedural - Tracing of procedural calls. <i>NOTE: Enabling this option can generate large volumes of log entries. Use only during troubleshooting.</i></li>
<li><b>Inf</b>: Information - Detailed information logging. <i>NOTE: Enabling this option can generate large volumes of log entries. Use only during troubleshooting.</i></li>
<li><b>Aud</b>: Audit - Audit trail events such as batch creation, object deletion, etc.</li>
</ul>
</td>
  </tr>
</table>
</td>
  </tr>
  <tr>
     <td>GetEventList(StartTime As DateTime, EndTime As DateTime, Types As EventType, UserAccount As String, MachineName As String, ProcedureName As String, MessageText As String, ItemName As String) As List`1</td>
     <td><table class='ParamList' width='100%'>
  <col style='width:100%'/>
  <tr>
     <td><b>Parameters</b></td>
  </tr>
  <tr>
     <td><i>StartTime</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: DateTime</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
  <tr>
     <td>&nbsp;</td>
  </tr>
  <tr>
     <td><i>EndTime</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: DateTime</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
  <tr>
     <td>&nbsp;</td>
  </tr>
  <tr>
     <td><i>Types</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: EventType</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
  <tr>
     <td>&nbsp;</td>
  </tr>
  <tr>
     <td><i>UserAccount</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: String</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
  <tr>
     <td>&nbsp;</td>
  </tr>
  <tr>
     <td><i>MachineName</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: String</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
  <tr>
     <td>&nbsp;</td>
  </tr>
  <tr>
     <td><i>ProcedureName</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: String</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
  <tr>
     <td>&nbsp;</td>
  </tr>
  <tr>
     <td><i>MessageText</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: String</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
  <tr>
     <td>&nbsp;</td>
  </tr>
  <tr>
     <td><i>ItemName</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: String</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
</table>
</td>
  </tr>
  <tr>
     <td>GetEventName(Type As EventType) As String</td>
     <td>Returns a user-friendly name for the specified event type.
<table class='ParamList' width='100%'>
  <col style='width:100%'/>
  <tr>
     <td><b>Parameters</b></td>
  </tr>
  <tr>
     <td><i>Type</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: EventType</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The EventType. A combination of the following flags:<br />
<ul>
<li><b>Err</b>: Errors - Critical error messages.</li>
<li><b>Wrn</b>: Warnings - Non-critical warning messages.</li>
<li><b>Prc</b>: Procedural - Tracing of procedural calls. <i>NOTE: Enabling this option can generate large volumes of log entries. Use only during troubleshooting.</i></li>
<li><b>Inf</b>: Information - Detailed information logging. <i>NOTE: Enabling this option can generate large volumes of log entries. Use only during troubleshooting.</i></li>
<li><b>Aud</b>: Audit - Audit trail events such as batch creation, object deletion, etc.</li>
</ul>
</td>
  </tr>
</table>
</td>
  </tr>
  <tr>
     <td>GetHashCode() As Int32</td>
     <td>Serves as a hash function for a particular type. 
</td>
  </tr>
  <tr>
     <td>GetLastError() As String</td>
     <td></td>
  </tr>
  <tr>
     <td>GetNodeById(Id As Guid) As GrooperNode</td>
     <td>Loads the node with the specified Id and all branches above it.
<table class='ParamList' width='100%'>
  <col style='width:100%'/>
  <tr>
     <td><b>Parameters</b></td>
  </tr>
  <tr>
     <td><i>Id</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: Guid</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The Id of the node to load.</td>
  </tr>
</table>
</td>
  </tr>
  <tr>
     <td>GetNodeTypeImage(TypeName As String) As Image</td>
     <td>Retrieves an icon corresponding to the GrooperNode TypeName provided.
<table class='ParamList' width='100%'>
  <col style='width:100%'/>
  <tr>
     <td><b>Parameters</b></td>
  </tr>
  <tr>
     <td><i>TypeName</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: String</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The GrooperNode TypeName</td>
  </tr>
</table>
</td>
  </tr>
  <tr>
     <td>GetPendingTaskInfo() As Dictionary`2</td>
     <td></td>
  </tr>
  <tr>
     <td>GetPendingTaskPageCount(ModuleName As String) As Int32</td>
     <td><table class='ParamList' width='100%'>
  <col style='width:100%'/>
  <tr>
     <td><b>Parameters</b></td>
  </tr>
  <tr>
     <td><i>ModuleName</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: String</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
</table>
</td>
  </tr>
  <tr>
     <td>GetPendingTasks(ModuleName As String) As Int32</td>
     <td><table class='ParamList' width='100%'>
  <col style='width:100%'/>
  <tr>
     <td><b>Parameters</b></td>
  </tr>
  <tr>
     <td><i>ModuleName</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: String</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
</table>
</td>
  </tr>
  <tr>
     <td>GetQualifiedName(ObjectName As String) As String</td>
     <td>Returns object name prefaced with it's schema (owner) name.
<table class='ParamList' width='100%'>
  <col style='width:100%'/>
  <tr>
     <td><b>Parameters</b></td>
  </tr>
  <tr>
     <td><i>ObjectName</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: String</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
</table>
</td>
  </tr>
  <tr>
     <td>GetRecentEvents(NumberOfEvents As Int32, TypeFlags As Int32) As List`1</td>
     <td><table class='ParamList' width='100%'>
  <col style='width:100%'/>
  <tr>
     <td><b>Parameters</b></td>
  </tr>
  <tr>
     <td><i>NumberOfEvents</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: Int32</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
  <tr>
     <td>&nbsp;</td>
  </tr>
  <tr>
     <td><i>TypeFlags</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: Int32</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
</table>
</td>
  </tr>
  <tr>
     <td>GetSetting(Name As String) As String</td>
     <td><table class='ParamList' width='100%'>
  <col style='width:100%'/>
  <tr>
     <td><b>Parameters</b></td>
  </tr>
  <tr>
     <td><i>Name</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: String</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
</table>
</td>
  </tr>
  <tr>
     <td>GetStatus() As DatabaseStatus</td>
     <td>Returns a status enumeration for the database.  Can be called with the connection open or closed.
</td>
  </tr>
  <tr>
     <td>GetTables() As List`1</td>
     <td>Returns a list of names of tables within the current database.
</td>
  </tr>
  <tr>
     <td>GetTableSchema(TableName As String) As DataTable</td>
     <td>Returns a DataTable that describes the column metadata for the passed table name.
<table class='ParamList' width='100%'>
  <col style='width:100%'/>
  <tr>
     <td><b>Parameters</b></td>
  </tr>
  <tr>
     <td><i>TableName</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: String</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
</table>
</td>
  </tr>
  <tr>
     <td>GetThumbnail(Page As <a href='../../Administrator_Reference/Grooper_Node_Types/Batch_Processing/Batch_Page.htm'>BatchPage</a>) As GrooperImage</td>
     <td><table class='ParamList' width='100%'>
  <col style='width:100%'/>
  <tr>
     <td><b>Parameters</b></td>
  </tr>
  <tr>
     <td><i>Page</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: <a href='../../Administrator_Reference/Grooper_Node_Types/Batch_Processing/Batch_Page.htm'>BatchPage</a></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
</table>
</td>
  </tr>
  <tr>
     <td>GetTotalNodeCount() As Int32</td>
     <td></td>
  </tr>
  <tr>
     <td>GetType() As Type</td>
     <td>Gets the type of the current instance.
</td>
  </tr>
  <tr>
     <td>GetUserDisplayName(UserId As String) As String</td>
     <td><table class='ParamList' width='100%'>
  <col style='width:100%'/>
  <tr>
     <td><b>Parameters</b></td>
  </tr>
  <tr>
     <td><i>UserId</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: String</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
</table>
</td>
  </tr>
  <tr>
     <td>HasThumbnail(Page As <a href='../../Administrator_Reference/Grooper_Node_Types/Batch_Processing/Batch_Page.htm'>BatchPage</a>) As Boolean</td>
     <td><table class='ParamList' width='100%'>
  <col style='width:100%'/>
  <tr>
     <td><b>Parameters</b></td>
  </tr>
  <tr>
     <td><i>Page</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: <a href='../../Administrator_Reference/Grooper_Node_Types/Batch_Processing/Batch_Page.htm'>BatchPage</a></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
</table>
</td>
  </tr>
  <tr>
     <td>LoadNode(Id As Guid) As GrooperNode</td>
     <td>Loads the selected node of the Grooper tree structure.
<table class='ParamList' width='100%'>
  <col style='width:100%'/>
  <tr>
     <td><b>Parameters</b></td>
  </tr>
  <tr>
     <td><i>Id</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: Guid</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
</table>
</td>
  </tr>
  <tr>
     <td>LoadRootNode() As GrooperRoot</td>
     <td>Loads the root node of the Grooper tree structure.
</td>
  </tr>
  <tr>
     <td>Lock() As Boolean</td>
     <td></td>
  </tr>
  <tr>
     <td>LockIsHeld() As Boolean</td>
     <td></td>
  </tr>
  <tr>
     <td>LockIsHeldByCurrentThread() As Boolean</td>
     <td></td>
  </tr>
  <tr>
     <td>NodeIdExists(Id As Guid) As Boolean</td>
     <td>Determines if a node with the provided Id exists in the database.
<table class='ParamList' width='100%'>
  <col style='width:100%'/>
  <tr>
     <td><b>Parameters</b></td>
  </tr>
  <tr>
     <td><i>Id</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: Guid</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The Id value to search for.</td>
  </tr>
</table>
</td>
  </tr>
  <tr>
     <td>NodeIsDeleted(Node As <a href='GrooperNode_SDK.htm'>GrooperNode</a>) As Boolean</td>
     <td>Determines if a node has been deleted and is currently pending a database write.
<table class='ParamList' width='100%'>
  <col style='width:100%'/>
  <tr>
     <td><b>Parameters</b></td>
  </tr>
  <tr>
     <td><i>Node</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: <a href='GrooperNode_SDK.htm'>GrooperNode</a></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The node to check.</td>
  </tr>
</table>
</td>
  </tr>
  <tr>
     <td>NodeIsDirty(Node As <a href='GrooperNode_SDK.htm'>GrooperNode</a>) As Boolean</td>
     <td>Determines if a node has been changed and is currently pending a database write.
<table class='ParamList' width='100%'>
  <col style='width:100%'/>
  <tr>
     <td><b>Parameters</b></td>
  </tr>
  <tr>
     <td><i>Node</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: <a href='GrooperNode_SDK.htm'>GrooperNode</a></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The node to check.</td>
  </tr>
</table>
</td>
  </tr>
  <tr>
     <td>NodeIsLoaded(Id As Guid) As Boolean</td>
     <td><table class='ParamList' width='100%'>
  <col style='width:100%'/>
  <tr>
     <td><b>Parameters</b></td>
  </tr>
  <tr>
     <td><i>Id</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: Guid</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
</table>
</td>
  </tr>
  <tr>
     <td>ObjectIdsForType(TypeName As String) As List`1</td>
     <td><table class='ParamList' width='100%'>
  <col style='width:100%'/>
  <tr>
     <td><b>Parameters</b></td>
  </tr>
  <tr>
     <td><i>TypeName</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: String</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
</table>
</td>
  </tr>
  <tr>
     <td>Reconnect() As Boolean</td>
     <td></td>
  </tr>
  <tr>
     <td>Refresh()</td>
     <td>Reloads any nodes which have changed since their last load.
</td>
  </tr>
  <tr>
     <td>RollbackTransaction() As Boolean</td>
     <td></td>
  </tr>
  <tr>
     <td>SaveChanges(ipd As IProgressDisplay) As Boolean</td>
     <td>Saves pending tree structure changes to the database.
<table class='ParamList' width='100%'>
  <col style='width:100%'/>
  <tr>
     <td><b>Parameters</b></td>
  </tr>
  <tr>
     <td><i>ipd</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: IProgressDisplay</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
</table>
</td>
  </tr>
  <tr>
     <td>SaveChanges(NodeId As Guid) As Boolean</td>
     <td><table class='ParamList' width='100%'>
  <col style='width:100%'/>
  <tr>
     <td><b>Parameters</b></td>
  </tr>
  <tr>
     <td><i>NodeId</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: Guid</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
</table>
</td>
  </tr>
  <tr>
     <td>SaveDeletes(ipd As IProgressDisplay) As Boolean</td>
     <td>Saves pending tree structure changes to the database when only deletes have been
performed.  Do not call this unless you are sure that nothing but deletes have been performed. Developed for use in batches where deleting a single page may require thousands of pages
behind it to be renumbered.  Since the renumbering has already been done to each node in memory,
a SQL bulk update is used to update the database rows.
<table class='ParamList' width='100%'>
  <col style='width:100%'/>
  <tr>
     <td><b>Parameters</b></td>
  </tr>
  <tr>
     <td><i>ipd</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: IProgressDisplay</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
</table>
</td>
  </tr>
  <tr>
     <td>SaveSetting(Name As String, Value As String) As Boolean</td>
     <td><table class='ParamList' width='100%'>
  <col style='width:100%'/>
  <tr>
     <td><b>Parameters</b></td>
  </tr>
  <tr>
     <td><i>Name</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: String</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
  <tr>
     <td>&nbsp;</td>
  </tr>
  <tr>
     <td><i>Value</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: String</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
</table>
</td>
  </tr>
  <tr>
     <td>SetLastError(Message As String, pa() As Object)</td>
     <td><table class='ParamList' width='100%'>
  <col style='width:100%'/>
  <tr>
     <td><b>Parameters</b></td>
  </tr>
  <tr>
     <td><i>Message</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: String</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
  <tr>
     <td>&nbsp;</td>
  </tr>
  <tr>
     <td><i>pa</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: Object</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
</table>
</td>
  </tr>
  <tr>
     <td>TableExists(TableName As String) As Boolean</td>
     <td>Returns True if a table exists in the current database whose name matches the passed value.
<table class='ParamList' width='100%'>
  <col style='width:100%'/>
  <tr>
     <td><b>Parameters</b></td>
  </tr>
  <tr>
     <td><i>TableName</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: String</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
</table>
</td>
  </tr>
  <tr>
     <td>TablesExist() As Boolean</td>
     <td></td>
  </tr>
  <tr>
     <td>ToString() As String</td>
     <td>Returns a string that represents the current object.
</td>
  </tr>
  <tr>
     <td>TrackNodeChange(Node As <a href='GrooperNode_SDK.htm'>GrooperNode</a>)</td>
     <td>Reports to the change tracker that a node has been changed.
<table class='ParamList' width='100%'>
  <col style='width:100%'/>
  <tr>
     <td><b>Parameters</b></td>
  </tr>
  <tr>
     <td><i>Node</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: <a href='GrooperNode_SDK.htm'>GrooperNode</a></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The changed GrooperNode</td>
  </tr>
</table>
</td>
  </tr>
  <tr>
     <td>TrackNodeDelete(Node As <a href='GrooperNode_SDK.htm'>GrooperNode</a>)</td>
     <td>Reports to the change tracker that a node has been deleted.
<table class='ParamList' width='100%'>
  <col style='width:100%'/>
  <tr>
     <td><b>Parameters</b></td>
  </tr>
  <tr>
     <td><i>Node</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: <a href='GrooperNode_SDK.htm'>GrooperNode</a></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The deleted GrooperNode</td>
  </tr>
</table>
</td>
  </tr>
  <tr>
     <td>UncacheObjectsOfType(Type As Type)</td>
     <td><table class='ParamList' width='100%'>
  <col style='width:100%'/>
  <tr>
     <td><b>Parameters</b></td>
  </tr>
  <tr>
     <td><i>Type</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: Type</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
</table>
</td>
  </tr>
  <tr>
     <td>Unlock()</td>
     <td></td>
  </tr>
  <tr>
     <td>ValidateConnection(ReConnectIfClosed As Boolean) As Boolean</td>
     <td>
Ensures the DB connection has not been forcibly closed by the remote host.

<table class='ParamList' width='100%'>
  <col style='width:100%'/>
  <tr>
     <td><b>Parameters</b></td>
  </tr>
  <tr>
     <td><i>ReConnectIfClosed</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: Boolean</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;If true is passed, an attempt to re-open the connection will be made if the connection is closed.</td>
  </tr>
</table>
</td>
  </tr>
  <tr>
     <td>WriteToLog(Node As <a href='GrooperNode_SDK.htm'>GrooperNode</a>, Type As EventType, Message As String, pa() As Object)</td>
     <td><table class='ParamList' width='100%'>
  <col style='width:100%'/>
  <tr>
     <td><b>Parameters</b></td>
  </tr>
  <tr>
     <td><i>Node</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: <a href='GrooperNode_SDK.htm'>GrooperNode</a></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
  <tr>
     <td>&nbsp;</td>
  </tr>
  <tr>
     <td><i>Type</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: EventType</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
  <tr>
     <td>&nbsp;</td>
  </tr>
  <tr>
     <td><i>Message</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: String</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
  <tr>
     <td>&nbsp;</td>
  </tr>
  <tr>
     <td><i>pa</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: Object</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
</table>
</td>
  </tr>
  <tr>
     <td>WriteToLog(ex As Exception)</td>
     <td>Writes an error to the Grooper event log, using the stack trace and message contained the provided exception.
<table class='ParamList' width='100%'>
  <col style='width:100%'/>
  <tr>
     <td><b>Parameters</b></td>
  </tr>
  <tr>
     <td><i>ex</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: Exception</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The exception to log.</td>
  </tr>
</table>
</td>
  </tr>
  <tr>
     <td>WriteToLog(ex As Exception, Message As String, pa() As Object)</td>
     <td>Writes an error to the Grooper event log, using the stack trace from the provided exception and the specified message.
<table class='ParamList' width='100%'>
  <col style='width:100%'/>
  <tr>
     <td><b>Parameters</b></td>
  </tr>
  <tr>
     <td><i>ex</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: Exception</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The exception to log.</td>
  </tr>
  <tr>
     <td>&nbsp;</td>
  </tr>
  <tr>
     <td><i>Message</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: String</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The message to log.</td>
  </tr>
  <tr>
     <td>&nbsp;</td>
  </tr>
  <tr>
     <td><i>pa</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: Object</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String.Format() params.</td>
  </tr>
</table>
</td>
  </tr>
  <tr>
     <td>WriteToLog(Type As EventType, Message As String, pa() As Object)</td>
     <td>Writes an entry to the Grooper event log.
<table class='ParamList' width='100%'>
  <col style='width:100%'/>
  <tr>
     <td><b>Parameters</b></td>
  </tr>
  <tr>
     <td><i>Type</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: EventType</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The type of event to log. A combination of the following flags:<br />
<ul>
<li><b>Err</b>: Errors - Critical error messages.</li>
<li><b>Wrn</b>: Warnings - Non-critical warning messages.</li>
<li><b>Prc</b>: Procedural - Tracing of procedural calls. <i>NOTE: Enabling this option can generate large volumes of log entries. Use only during troubleshooting.</i></li>
<li><b>Inf</b>: Information - Detailed information logging. <i>NOTE: Enabling this option can generate large volumes of log entries. Use only during troubleshooting.</i></li>
<li><b>Aud</b>: Audit - Audit trail events such as batch creation, object deletion, etc.</li>
</ul>
</td>
  </tr>
  <tr>
     <td>&nbsp;</td>
  </tr>
  <tr>
     <td><i>Message</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: String</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The message, or message format.  Uses String.Format syntax.</td>
  </tr>
  <tr>
     <td>&nbsp;</td>
  </tr>
  <tr>
     <td><i>pa</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: Object</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Parameters for String.Format</td>
  </tr>
</table>
</td>
  </tr>
  <tr>
     <td>WriteToLog(Node As <a href='GrooperNode_SDK.htm'>GrooperNode</a>, ex As Exception, Message As String, pa() As Object)</td>
     <td><table class='ParamList' width='100%'>
  <col style='width:100%'/>
  <tr>
     <td><b>Parameters</b></td>
  </tr>
  <tr>
     <td><i>Node</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: <a href='GrooperNode_SDK.htm'>GrooperNode</a></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
  <tr>
     <td>&nbsp;</td>
  </tr>
  <tr>
     <td><i>ex</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: Exception</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
  <tr>
     <td>&nbsp;</td>
  </tr>
  <tr>
     <td><i>Message</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: String</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
  <tr>
     <td>&nbsp;</td>
  </tr>
  <tr>
     <td><i>pa</i></td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: Object</td>
  </tr>
  <tr>
     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
  </tr>
</table>
</td>
  </tr>
</table>
<br/><h2>Commands</h2>
No commands defined<br/>
<div style="width: 100%; position: relative;" id="footer">
	<hr align="center" />
	<p style="font-size: 10pt;">2015 by BIS - <a href="http://www.bisok.com" 
												 target="_blank">http://www.bisok.com</a> 
	 </p>
</div>
<script type="text/javascript" language="javascript1.2">//<![CDATA[
<!--
if (window.writeIntopicBar)
	writeIntopicBar(0);

highlightSearch();
//-->
//]]></script>
</body>
</html>
